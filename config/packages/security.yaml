security:
  encoders:
    App\Entity\Users:
      algorithm: auto
    App\Entity\Clients:
      algorithm: auto
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    app_user_provider:
      entity:
        class: App\Entity\Users
        property: email
    app_client_provider:
      entity:
        class: App\Entity\Clients
        property: email
    users_in_memory: { memory: null }
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    admin:
      pattern: ^/admin
      anonymous: true
      lazy: true
      provider: app_user_provider
      guard:
        authenticators:
          - App\Security\UsersAuthenticator
        entry_point: App\Security\UsersAuthenticator
      logout:
        path: admin_logout
        target: admin

    main:
      anonymous: true
      lazy: true
      provider: app_client_provider
      guard:
        authenticators:
          - App\Security\ClientsAuthenticator
        entry_point: App\Security\ClientsAuthenticator
      logout:
        path: app_logout
        # where to redirect after logout
        # target: app_any_route

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication
      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
    - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: https }
    - { path: ^/account, roles: ROLE_CLIENT, requires_channel: https }
    - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
